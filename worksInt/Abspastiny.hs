

module Abspastiny where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq,Ord,Show,Read)
data Prg =
   Prog [Dec] [Stm]
  deriving (Eq,Ord,Show,Read)

data Dec =
   VDecl Ident
 | VDeclass Ident Exp
 | PDecl Ident [Adec] Stm
  deriving (Eq,Ord,Show,Read)

data Adec =
   ADecr Ident
 | ADecv Ident
  deriving (Eq,Ord,Show,Read)

data Ass =
   Assign Ident Exp
  deriving (Eq,Ord,Show,Read)

data Stm =
   Sass Ass
 | Sempty
 | Swhile Exp Stm
 | Selif Exp Stm Stm
 | Sif Exp Stm
 | SBlock [Stm]
 | Scall Ident [Exp]
 | Sfort Ass Exp Stm
 | Sford Ass Exp Stm
 | Sprint Exp
 | Sprintstr String
  deriving (Eq,Ord,Show,Read)

data Exp =
   EAnd Exp Exp
 | EOr Exp Exp
 | ENot Exp
 | EEq Exp Exp
 | Eneq Exp Exp
 | Elt Exp Exp
 | Egt Exp Exp
 | Eelt Exp Exp
 | Eegt Exp Exp
 | EAdd Exp Exp
 | ESub Exp Exp
 | Einc Exp
 | Edec Exp
 | Ediv Exp Exp
 | EMul Exp Exp
 | EInt Integer
 | Evar Ident
  deriving (Eq,Ord,Show,Read)


module Skelpastiny where

-- Haskell module generated by the BNF converter

import Abspastiny
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transPrg :: Prg -> Result
transPrg x = case x of
  Prog decs stms  -> failure x


transDec :: Dec -> Result
transDec x = case x of
  VDecl id  -> failure x
  VDeclass id exp  -> failure x
  PDecl id adecs stm  -> failure x


transAdec :: Adec -> Result
transAdec x = case x of
  ADecr id  -> failure x
  ADecv id  -> failure x


transAss :: Ass -> Result
transAss x = case x of
  Assign id exp  -> failure x


transStm :: Stm -> Result
transStm x = case x of
  Sass ass  -> failure x
  Sempty  -> failure x
  Swhile exp stm  -> failure x
  Selif exp stm1 stm2  -> failure x
  Sif exp stm  -> failure x
  SBlock stms  -> failure x
  Scall id exps  -> failure x
  Sfort ass exp stm  -> failure x
  Sford ass exp stm  -> failure x
  Sprint exp  -> failure x
  Sprintstr str  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  EAnd exp1 exp2  -> failure x
  EOr exp1 exp2  -> failure x
  ENot exp  -> failure x
  EEq exp1 exp2  -> failure x
  Eneq exp1 exp2  -> failure x
  Elt exp1 exp2  -> failure x
  Egt exp1 exp2  -> failure x
  Eelt exp1 exp2  -> failure x
  Eegt exp1 exp2  -> failure x
  EAdd exp1 exp2  -> failure x
  ESub exp1 exp2  -> failure x
  Einc exp  -> failure x
  Edec exp  -> failure x
  Ediv exp1 exp2  -> failure x
  EMul exp1 exp2  -> failure x
  EInt n  -> failure x
  Evar id  -> failure x



